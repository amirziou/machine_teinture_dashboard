[
    {
        "id": "fc7fe9daa568b682",
        "type": "tab",
        "label": "Flow 2",
        "disabled": false,
        "info": "",
        "env": []
    },
    {
        "id": "65364233e097b60e",
        "type": "ui_base",
        "theme": {
            "name": "theme-light",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#0094CE",
                    "value": "#0094CE",
                    "edited": true
                },
                "page-titlebar-backgroundColor": {
                    "value": "#0094CE",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#fafafa",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#1bbfff",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#111111",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#0094ce",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#ffffff",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey",
                "palette": "light"
            }
        },
        "site": {
            "name": "Node-RED Dashboard",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "lockMenu": "false",
            "allowTempTheme": "true",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "307f18a8c7fc0bd5",
        "type": "modbus-client",
        "name": "opc",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "COM3",
        "serialType": "ASCII",
        "serialBaudrate": "9600",
        "serialDatabits": "7",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": 1,
        "commandDelay": 1,
        "clientTimeout": 1000,
        "reconnectOnTimeout": true,
        "reconnectTimeout": 2000,
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "a2bba9102577b8eb",
        "type": "ui_group",
        "name": "voyants",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": 10,
        "collapse": false,
        "className": ""
    },
    {
        "id": "94efdd0263268698",
        "type": "mqtt-broker",
        "name": "",
        "broker": "localhost",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "d667cca9e4d7f182",
        "type": "mqtt-broker",
        "name": "",
        "broker": "mqtt.eclipse.org",
        "port": "1883",
        "clientid": "",
        "autoConnect": true,
        "usetls": false,
        "protocolVersion": "4",
        "keepalive": "60",
        "cleansession": true,
        "birthTopic": "",
        "birthQos": "0",
        "birthPayload": "",
        "birthMsg": {},
        "closeTopic": "",
        "closeQos": "0",
        "closePayload": "",
        "closeMsg": {},
        "willTopic": "",
        "willQos": "0",
        "willPayload": "",
        "willMsg": {},
        "userProps": "",
        "sessionExpiry": ""
    },
    {
        "id": "769f553075e77d4a",
        "type": "ui_group",
        "name": "Y",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "59b2d9869b66cc6e",
        "type": "ui_group",
        "name": "configuration",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "95bc733e.218b4",
        "type": "ui_group",
        "name": "Entrée",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "58fd4835.9abd98",
        "type": "ui_group",
        "name": "Bouttons",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "d786029.c71ed",
        "type": "ui_group",
        "name": "température",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "11",
        "collapse": false,
        "className": ""
    },
    {
        "id": "5ebef774.c21108",
        "type": "ui_group",
        "name": "Vitesse du moteur",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "b59b803adde5ee5f",
        "type": "ui_group",
        "name": "Analyse de température",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "7",
        "collapse": false,
        "className": ""
    },
    {
        "id": "bc1e206ec04d4854",
        "type": "ui_group",
        "name": "configuration",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1c9b81f635538e1a",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 30
    },
    {
        "id": "1323b8585a31b9f6",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 30
    },
    {
        "id": "91c9de56113b0a06",
        "type": "ui_group",
        "name": "Group 1",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": 30
    },
    {
        "id": "d27a1663f1a8968a",
        "type": "ui_group",
        "name": "configuration",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "573ea6b2fbb159d1",
        "type": "ui_group",
        "name": "bouttons",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c181534c4e53fbc4",
        "type": "ui_group",
        "name": "voyants",
        "tab": "",
        "order": 4,
        "disp": true,
        "width": "2",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0f8de15fc8fd47d7",
        "type": "ui_group",
        "name": "OUTPUTS",
        "tab": "",
        "order": 6,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "0c5d3d821a463556",
        "type": "ui_group",
        "name": "Moteurs",
        "tab": "",
        "order": 7,
        "disp": true,
        "width": "3",
        "collapse": false,
        "className": ""
    },
    {
        "id": "7f866472b6cfb45b",
        "type": "ui_group",
        "name": "afficheur 7 seg",
        "tab": "",
        "order": 8,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "e2d480b8000a4f03",
        "type": "MySQLdatabase",
        "name": "",
        "host": "89.117.9.123",
        "port": "3306",
        "db": "u674759547_dbmindeq",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "3031cc9be4abd77e",
        "type": "MySQLdatabase",
        "name": "",
        "host": "127.0.0.1",
        "port": "3306",
        "db": "test",
        "tz": "",
        "charset": "UTF8"
    },
    {
        "id": "41911c8b3ab30a27",
        "type": "modbus-client",
        "name": "",
        "clienttype": "tcp",
        "bufferCommands": true,
        "stateLogEnabled": false,
        "queueLogEnabled": false,
        "failureLogEnabled": true,
        "tcpHost": "192.168.1.33",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "/dev/ttyUSB",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "none",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "c13972334e080d75",
        "type": "modbus-client",
        "name": "",
        "clienttype": "serial",
        "bufferCommands": true,
        "stateLogEnabled": true,
        "queueLogEnabled": true,
        "failureLogEnabled": true,
        "tcpHost": "127.0.0.1",
        "tcpPort": "502",
        "tcpType": "DEFAULT",
        "serialPort": "COM3",
        "serialType": "RTU-BUFFERD",
        "serialBaudrate": "9600",
        "serialDatabits": "8",
        "serialStopbits": "1",
        "serialParity": "even",
        "serialConnectionDelay": "100",
        "serialAsciiResponseStartDelimiter": "0x3A",
        "unit_id": "1",
        "commandDelay": "1",
        "clientTimeout": "1000",
        "reconnectOnTimeout": true,
        "reconnectTimeout": "2000",
        "parallelUnitIdsAllowed": true,
        "showWarnings": true,
        "showLogs": true
    },
    {
        "id": "3f515cf03f31e09f",
        "type": "ui_group",
        "name": "configuration",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "79c93d6a4b18c74b",
        "type": "ui_group",
        "name": "configuration",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "6d00c812708a2bdf",
        "type": "ui_group",
        "name": "configuration",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "8af3156c7d7cdfa8",
        "type": "ui_group",
        "name": "Selection date",
        "tab": "",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "9e46086f2e3899ba",
        "type": "ui_group",
        "name": "Group 2",
        "tab": "",
        "order": 2,
        "disp": true,
        "width": 6
    },
    {
        "id": "bff00bf35a1c69bf",
        "type": "firebase config",
        "d": true,
        "firebaseurl": "mindeq-bf432-default-rtdb",
        "loginType": "none"
    },
    {
        "id": "20e14e74bf411b32",
        "type": "database-config",
        "name": "machine_teinture_db",
        "authType": "privateKey",
        "claims": {},
        "createUser": false,
        "useClaims": false
    },
    {
        "id": "0a97d87e14763514",
        "type": "ui_group",
        "name": "Selection date",
        "tab": "7b49a63af6baa3d5",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "f2fda1ca9c74d814",
        "type": "ui_group",
        "name": "EAU",
        "tab": "7b49a63af6baa3d5",
        "order": 2,
        "disp": true,
        "width": 24,
        "collapse": false,
        "className": ""
    },
    {
        "id": "6b316a731f2e67ed",
        "type": "ui_group",
        "name": "Consomation",
        "tab": "f5f82f1b5143417d",
        "order": 2,
        "disp": true,
        "width": 14,
        "collapse": false,
        "className": ""
    },
    {
        "id": "7b49a63af6baa3d5",
        "type": "ui_tab",
        "name": "Consommation de l'eau",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "906bf22037b8c4fa",
        "type": "ui_group",
        "name": "Group 17",
        "tab": "",
        "order": 17,
        "disp": true,
        "width": 6
    },
    {
        "id": "d783cb980c3979fc",
        "type": "ui_group",
        "name": "Demo",
        "tab": "0449b3b1fea99d52",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false
    },
    {
        "id": "0449b3b1fea99d52",
        "type": "ui_tab",
        "name": "Demo",
        "icon": "dashboard",
        "disabled": false,
        "hidden": false
    },
    {
        "id": "f5f82f1b5143417d",
        "type": "ui_tab",
        "name": "Consomation electrique",
        "icon": "dashboard",
        "order": 3,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "880b9ee2c0fd9db3",
        "type": "ui_group",
        "name": "Selection date",
        "tab": "f5f82f1b5143417d",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "c5cc618e8f0d02f5",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "9de254345e4e8286",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "a75d06467b7e7e1f",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "fbed606a9cb74436",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "f15e895089df6bd6",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "e5897ce67ed7da7b",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "aa5ae70c2c6abea8",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "ded5e0468be4867d",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "880b9ee2c0fd9db3",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "59688ebd46c62328",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "6b316a731f2e67ed",
        "order": 3,
        "width": 14,
        "height": 1
    },
    {
        "id": "7c43cdbd187b52c4",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "6b316a731f2e67ed",
        "order": 4,
        "width": 2,
        "height": 1
    },
    {
        "id": "57eba6ba97988c82",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "6b316a731f2e67ed",
        "order": 6,
        "width": 4,
        "height": 1
    },
    {
        "id": "aeee7a88ab342e95",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "6b316a731f2e67ed",
        "order": 8,
        "width": 3,
        "height": 1
    },
    {
        "id": "1e142cdeb82002af",
        "type": "ui_group",
        "name": "Dropdown",
        "tab": "7b49a63af6baa3d5",
        "order": 3,
        "disp": true,
        "width": 5,
        "collapse": false,
        "className": ""
    },
    {
        "id": "83bdc2c10309980c",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 1,
        "width": 6,
        "height": 1
    },
    {
        "id": "9e96ae716a8addfb",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 2,
        "width": 6,
        "height": 1
    },
    {
        "id": "30b51231230b7726",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 3,
        "width": 6,
        "height": 1
    },
    {
        "id": "0223c594e85ea54f",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 4,
        "width": 6,
        "height": 1
    },
    {
        "id": "f75ca441cd8f6151",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 5,
        "width": 6,
        "height": 1
    },
    {
        "id": "82eca0159b02e73b",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 7,
        "width": 6,
        "height": 1
    },
    {
        "id": "50ffff4cd5b45d01",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 8,
        "width": 6,
        "height": 1
    },
    {
        "id": "251c45d8a25ee523",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "0a97d87e14763514",
        "order": 9,
        "width": 6,
        "height": 1
    },
    {
        "id": "719dd8c5ad83012c",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 1,
        "width": 1,
        "height": 1
    },
    {
        "id": "ffaf010731f4bc3d",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 3,
        "width": 2,
        "height": 1
    },
    {
        "id": "c2a0e8c8d5f8bda5",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 5,
        "width": 1,
        "height": 1
    },
    {
        "id": "5c15be4eeb18d7db",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 6,
        "width": 1,
        "height": 1
    },
    {
        "id": "a888b168fc17c132",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 7,
        "width": 2,
        "height": 1
    },
    {
        "id": "95ce753a727f533d",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 8,
        "width": 1,
        "height": 1
    },
    {
        "id": "9de417a017a069eb",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 9,
        "width": 1,
        "height": 1
    },
    {
        "id": "781a637de2d54720",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 10,
        "width": 2,
        "height": 1
    },
    {
        "id": "d36160e2e553ab26",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 11,
        "width": 1,
        "height": 1
    },
    {
        "id": "42991f3b9fb039fa",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 12,
        "width": 1,
        "height": 1
    },
    {
        "id": "44c9b93989a30ba7",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 13,
        "width": 2,
        "height": 1
    },
    {
        "id": "99e2a53cda96b808",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 14,
        "width": 1,
        "height": 1
    },
    {
        "id": "ab3088b818584f70",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 15,
        "width": 1,
        "height": 1
    },
    {
        "id": "8b8aa18e1c90f9a7",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 16,
        "width": 2,
        "height": 1
    },
    {
        "id": "3f0b076abcec683d",
        "type": "ui_spacer",
        "z": "fc7fe9daa568b682",
        "name": "spacer",
        "group": "f2fda1ca9c74d814",
        "order": 17,
        "width": 1,
        "height": 1
    },
    {
        "id": "230b0d7be75ccff9",
        "type": "firebase-get",
        "z": "fc7fe9daa568b682",
        "name": "machine_teinture_db",
        "constraint": {},
        "database": "20e14e74bf411b32",
        "outputType": "auto",
        "passThrough": false,
        "path": "OjGW6yGVQFeMDmwuCAuD5wo0pPe2/machine1/",
        "pathType": "str",
        "useConstraint": false,
        "x": 660,
        "y": 60,
        "wires": [
            [
                "88ce6866dd1d2955",
                "ae183f298cb0f72c"
            ]
        ]
    },
    {
        "id": "06f2a38529b947f7",
        "type": "inject",
        "z": "fc7fe9daa568b682",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 290,
        "y": 60,
        "wires": [
            [
                "230b0d7be75ccff9"
            ]
        ]
    },
    {
        "id": "88ce6866dd1d2955",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 1",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 60,
        "wires": []
    },
    {
        "id": "14e0216c9fdf7f46",
        "type": "ui_date_picker",
        "z": "fc7fe9daa568b682",
        "name": "",
        "label": "début",
        "group": "0a97d87e14763514",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 530,
        "y": 720,
        "wires": [
            [
                "71d57880775722a4"
            ]
        ]
    },
    {
        "id": "c9bbb15342739a95",
        "type": "ui_date_picker",
        "z": "fc7fe9daa568b682",
        "name": "",
        "label": "fin",
        "group": "0a97d87e14763514",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 530,
        "y": 760,
        "wires": [
            [
                "efcf167511acb67b"
            ]
        ]
    },
    {
        "id": "fec175127c745b74",
        "type": "ui_gauge",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "f2fda1ca9c74d814",
        "order": 2,
        "width": 10,
        "height": 5,
        "gtype": "wave",
        "title": "EAU DURE",
        "label": "L",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1050,
        "y": 980,
        "wires": []
    },
    {
        "id": "914ac717d115c7a4",
        "type": "ui_gauge",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "f2fda1ca9c74d814",
        "order": 4,
        "width": 10,
        "height": 5,
        "gtype": "wave",
        "title": "EAU DOUCE",
        "label": "L",
        "format": "{{value}}",
        "min": 0,
        "max": "1000",
        "colors": [
            "#00b500",
            "#e6e600",
            "#ca3838"
        ],
        "seg1": "",
        "seg2": "",
        "diff": false,
        "className": "",
        "x": 1050,
        "y": 1060,
        "wires": []
    },
    {
        "id": "4e16a23cc39b7be1",
        "type": "ui_chart",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "f2fda1ca9c74d814",
        "order": 18,
        "width": 12,
        "height": 9,
        "label": "EAU DURE",
        "chartType": "line",
        "legend": "false",
        "xformat": "MM/DD-HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": "2",
        "removeOlderPoints": "",
        "removeOlderUnit": "86400",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#10375b",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#8400ff",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1010,
        "y": 1200,
        "wires": [
            []
        ]
    },
    {
        "id": "4fcf5023b513d592",
        "type": "ui_chart",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "f2fda1ca9c74d814",
        "order": 19,
        "width": 12,
        "height": 9,
        "label": "EAU DOUCE",
        "chartType": "line",
        "legend": "false",
        "xformat": "MM/DD-HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#0f375b",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1010,
        "y": 1240,
        "wires": [
            []
        ]
    },
    {
        "id": "b0d1c2d1e3a139c2",
        "type": "template",
        "z": "fc7fe9daa568b682",
        "name": "",
        "field": "ui_control",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"options\":{\n        \"waveColor\" : \"#66FFF7\",\n        \"circleColor\": \"#03658c\"\n    }\n}",
        "output": "json",
        "x": 700,
        "y": 1040,
        "wires": [
            [
                "914ac717d115c7a4"
            ]
        ]
    },
    {
        "id": "3cae2c6478b4bd45",
        "type": "inject",
        "z": "fc7fe9daa568b682",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "",
        "payloadType": "num",
        "x": 450,
        "y": 1020,
        "wires": [
            [
                "b0d1c2d1e3a139c2",
                "5c993516fab64968"
            ]
        ]
    },
    {
        "id": "0023ece517069d62",
        "type": "ui_chart",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "6b316a731f2e67ed",
        "order": 1,
        "width": 14,
        "height": 9,
        "label": "Consomation KW",
        "chartType": "line",
        "legend": "false",
        "xformat": "MM/DD-HH:mm",
        "interpolate": "linear",
        "nodata": "",
        "dot": true,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": false,
        "useUTC": false,
        "colors": [
            "#10375b",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1030,
        "y": 1280,
        "wires": [
            []
        ]
    },
    {
        "id": "b346f9da725e5f52",
        "type": "ui_chart",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "6b316a731f2e67ed",
        "order": 2,
        "width": 14,
        "height": 9,
        "label": "Consomation KW bar chart ",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1220,
        "y": 1480,
        "wires": [
            []
        ]
    },
    {
        "id": "b0c34abfc938aced",
        "type": "ui_chart",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "f2fda1ca9c74d814",
        "order": 20,
        "width": 12,
        "height": 9,
        "label": "Eau dure bar chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1400,
        "wires": [
            []
        ]
    },
    {
        "id": "31ed4b7a5c0756eb",
        "type": "ui_chart",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "f2fda1ca9c74d814",
        "order": 21,
        "width": 12,
        "height": 9,
        "label": "Eau dure bar chart",
        "chartType": "bar",
        "legend": "false",
        "xformat": "HH:mm:ss",
        "interpolate": "linear",
        "nodata": "",
        "dot": false,
        "ymin": "",
        "ymax": "",
        "removeOlder": 1,
        "removeOlderPoints": "",
        "removeOlderUnit": "3600",
        "cutout": 0,
        "useOneColor": true,
        "useUTC": false,
        "colors": [
            "#1f77b4",
            "#aec7e8",
            "#ff7f0e",
            "#2ca02c",
            "#98df8a",
            "#d62728",
            "#ff9896",
            "#9467bd",
            "#c5b0d5"
        ],
        "outputs": 1,
        "useDifferentColor": false,
        "className": "",
        "x": 1190,
        "y": 1440,
        "wires": [
            []
        ]
    },
    {
        "id": "ae183f298cb0f72c",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "object -> array",
        "func": "// Assuming msg.payload contains the object\nglobal.set(\"object\", msg.payload);\n\n\nvar inputObject = msg.payload;\n\n// Convert object values to an array\nvar outputArray = Object.values(inputObject);\n\nglobal.set(\"outputArray\", outputArray);\n// Update msg.payload with the resulting array\n\nmsg.payload = outputArray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 300,
        "y": 200,
        "wires": [
            [
                "f07e0b8feefa1a35"
            ]
        ]
    },
    {
        "id": "64c84d6393938d83",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 3",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1080,
        "y": 200,
        "wires": []
    },
    {
        "id": "f07e0b8feefa1a35",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "gets all timestamps into array",
        "func": "// Initialize the global variable if not already done\nglobal.set('timestamp', []);\n\n\n// Iterate through msg.payload and extract timestamp values\nfor (let i = 0; i < msg.payload.length; i++) {\n    let currentTimestamp = msg.payload[i].timestamp;\n\n    // Add the current timestamp to the global array\n    global.get('timestamp').push(currentTimestamp);\n}\n\n// Log the updated global timestamp array\nconsole.log(\"Updated timestamp array:\", global.get('timestamp'));\n\nmsg.payload = global.get('timestamp');\n//msg.payload = msg.payload.length\n// Continue the flow by passing the original message\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 740,
        "y": 200,
        "wires": [
            [
                "64c84d6393938d83",
                "71471660501f36f4"
            ]
        ]
    },
    {
        "id": "71d57880775722a4",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "div 1000",
        "func": "msg.payload = msg.payload/1000\nglobal.set('début', msg.payload );\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 720,
        "wires": [
            [
                "fef9e0f5f9a9afe9"
            ]
        ]
    },
    {
        "id": "efcf167511acb67b",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "div 1000",
        "func": "msg.payload = msg.payload/1000\nglobal.set('fin', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 760,
        "wires": [
            [
                "631dd122e949d5e0"
            ]
        ]
    },
    {
        "id": "71471660501f36f4",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "time range selector between_d_f & i",
        "func": "var d = global.get('début');\nvar f = global.get('fin');\nvar ts = global.get('timestamp');\nmsg.payload = f;\n\nvar timestamp_btw = [];\nvar indicesArray = [];\n\n// Filter numbers in the input array\nfor (var i = 0; i < ts.length; i++) {\n    var currentNumber = ts[i];\n\n    if (currentNumber > d && currentNumber < f) {\n        timestamp_btw.push(currentNumber);\n        indicesArray.push(i);\n    }\n}\n\n// Store the output array in flow context\nglobal.set(\"timestamp_btw\", timestamp_btw);\nglobal.set(\"indicesArray\", indicesArray);\n\n// Output the result (optional)\nreturn {\n    payload: {\n        timestamp_btw: timestamp_btw,\n        indicesArray: indicesArray\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 360,
        "wires": [
            [
                "769ed342f3aa23e2",
                "39a68f45119cb08e"
            ]
        ]
    },
    {
        "id": "769ed342f3aa23e2",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 9",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1040,
        "y": 360,
        "wires": []
    },
    {
        "id": "39a68f45119cb08e",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "objects in range of time",
        "func": "var i = global.get('indicesArray');\nvar o = global.get('outputArray');\n\nvar nvArray = [];\n\nfor (var j = 0; j < i.length; j++) {\n\n    var currentIndex = i[j];\n\n    // Check if the index is within the bounds of 'o' array\n   \n    nvArray.push(o[currentIndex]);\n\n}\n\nmsg.payload = nvArray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 610,
        "y": 460,
        "wires": [
            [
                "7ff2dcec2091037d",
                "dedfecf9c630e57f"
            ]
        ]
    },
    {
        "id": "7ff2dcec2091037d",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 10",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1060,
        "y": 460,
        "wires": []
    },
    {
        "id": "dedfecf9c630e57f",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 1",
        "func": "var i = global.get('indicesArray');\n\nvar m = msg.payload;\n\nvar consomation = [];\nvar douce = [];\nvar dure = [];\n\nfor (var j = 0; j < i.length; j++) {\n\n    consomation.push(m[j].consomation);\n    douce.push(m[j].douce);\n    dure.push(m[j].dure);\n\n}\n\nglobal.set(\"consomation\", consomation);\nglobal.set(\"dure\", dure);\nglobal.set(\"douce\", douce);\n\nreturn {\n    payload: {\n        consomation: consomation,\n        dure: dure,\n        douce: douce\n    }\n};",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 840,
        "y": 560,
        "wires": [
            [
                "1b61f4ebfd4500cd"
            ]
        ]
    },
    {
        "id": "1b61f4ebfd4500cd",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 11",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 1120,
        "y": 560,
        "wires": []
    },
    {
        "id": "fef9e0f5f9a9afe9",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 12",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 720,
        "wires": []
    },
    {
        "id": "631dd122e949d5e0",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 13",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 760,
        "wires": []
    },
    {
        "id": "64282c0b02758047",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 2",
        "func": "var timestamps = global.get('timestamp_btw');\nvar dure = global.get('dure');\nvar dataPoints = [];\n\nfor (var i = 0; i < timestamps.length; i++) {\n    // Create a new JavaScript Date object based on the timestamp\n    var date = new Date(timestamps[i] * 1000);\n    // Format the date to 'year/month/day-HH:mm'\n    var formattedDate = date.getFullYear() + '/' +\n        ('0' + (date.getMonth() + 1)).slice(-2) + '/' +\n        ('0' + date.getDate()).slice(-2) + '-' +\n        ('0' + date.getHours()).slice(-2) + ':' +\n        ('0' + date.getMinutes()).slice(-2);\n\n    dataPoints.push({\n        x: formattedDate, // Use the formatted date for the x value\n        y: dure[i]\n    });\n}\n\nvar payload = [{\n    series: [\"Eau dure\"],\n    data: [dataPoints],\n    labels: [\"\"]\n}];\n\nmsg.payload = payload;\n\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1200,
        "wires": [
            [
                "ba561d7a784dcd70",
                "4e16a23cc39b7be1"
            ]
        ]
    },
    {
        "id": "ba561d7a784dcd70",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 14",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1000,
        "y": 1160,
        "wires": []
    },
    {
        "id": "b98569727d013732",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 3",
        "func": "var timestamps = global.get('timestamp_btw');\nvar douce = global.get(\"douce\");\nvar dataPoints = [];\n\nfor (var i = 0; i < timestamps.length; i++) {\n    // Create a new JavaScript Date object based on the timestamp\n    var date = new Date(timestamps[i] * 1000);\n    // Format the date to 'year/month/day-HH:mm'\n    var formattedDate = date.getFullYear() + '/' +\n        ('0' + (date.getMonth() + 1)).slice(-2) + '/' +\n        ('0' + date.getDate()).slice(-2) + '-' +\n        ('0' + date.getHours()).slice(-2) + ':' +\n        ('0' + date.getMinutes()).slice(-2);\n\n    dataPoints.push({\n        x: formattedDate, // Use the formatted date for the x value\n        y: douce[i]\n    });\n}\nvar payload = [{\n    series: [\"Eau douce\"],\n    data: [dataPoints],\n    labels: [\"\"]\n}];\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1240,
        "wires": [
            [
                "4fcf5023b513d592"
            ]
        ]
    },
    {
        "id": "87a8a437da1de8a6",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 4",
        "func": "var timestamps = global.get('timestamp_btw');\nvar consomation = global.get(\"consomation\");\nvar dataPoints = [];\n\nfor (var i = 0; i < timestamps.length; i++) {\n    // Create a new JavaScript Date object based on the timestamp\n    var date = new Date(timestamps[i] * 1000);\n    // Format the date to 'year/month/day-HH:mm'\n    var formattedDate = date.getFullYear() + '/' +\n        ('0' + (date.getMonth() + 1)).slice(-2) + '/' +\n        ('0' + date.getDate()).slice(-2) + '-' +\n        ('0' + date.getHours()).slice(-2) + ':' +\n        ('0' + date.getMinutes()).slice(-2);\n\n    dataPoints.push({\n        x: formattedDate, // Use the formatted date for the x value\n        y: consomation[i]\n    });\n}\n\nvar payload = [{\n    series: [\"A\"],\n    data: [dataPoints],\n    labels: [\"\"]\n}];\n\nmsg.payload = payload;\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 780,
        "y": 1280,
        "wires": [
            [
                "0023ece517069d62"
            ]
        ]
    },
    {
        "id": "2cc22929a47b82b3",
        "type": "ui_template",
        "z": "fc7fe9daa568b682",
        "group": "d783cb980c3979fc",
        "name": "Node-Red Dashboard Custom CSS",
        "order": 1,
        "width": 0,
        "height": 0,
        "format": "<style>\n\n    /*Main background*/\n    body {\n        background: -webkit-linear-gradient(\n            55deg,\n            #009785 0%,\n            #245aa5 50%,\n            /*#b800e9 100% */\n            #008000 100% /* green */\n            );\n    }\n\n    /*Top bar*/\n    body.nr-dashboard-theme md-toolbar,\n    body.nr-dashboard-theme md-content md-card {\n        background-color: transparent !important;\n        color: #FFFFFF !important;\n    }\n\n\n    /*Left menu*/\n    /*Sidebar*/\n    body.nr-dashboard-theme md-sidenav {\n        color: white !important;\n        background-color: rgba(0,0,0,0) !important;\n    }\n    /*Hover selection*/\n    a.md-no-style, button.md-no-style {\n        border-radius: 10px !important;\n    }\n    /*Selected*/\n    .nr-menu-item-active div button {\n        border-right: 4px solid rgb(41 98 255) !important;\n    }\n    /*List*/\n    body.nr-dashboard-theme md-sidenav div.md-list-item-inner {\n        color: white !important;\n        background-color: rgba(40,85,165,1) !important;\n        border-radius: 10px !important;\n    }\n\n\n    /*Groups*/\n    ui-card-panel {\n        background-color: rgba(255,255,255,0.3) !important;\n        border-radius: 10px !important;\n    }\n    .nr-dashboard-theme ui-card-panel {\n        border: none !important;\n    }\n    /*Name groups*/\n    .nr-dashboard-theme ui-card-panel p.nr-dashboard-cardtitle {\n        color: rgba(255, 255, 255, 1) !important;\n    }\n\n\n    /*Bouttons*/\n    .nr-dashboard-theme .nr-dashboard-button .md-button {\n        background-color: rgba(255,255,255,.1) !important;\n    }\n    .md-button {\n        border-radius: 10px !important;\n    }\n\n\n    /*Dropdown menu*/\n    .nr-dashboard-theme md-select-menu{\n        background-color: rgba(40,85,165,1) !important;\n    }\n    .nr-dashboard-theme md-select-menu, .nr-dashboard-theme md-select-menu md-option {\n        background-color: transparent !important;\n    }\n    .nr-dashboard-theme .md-select-menu-container {\n        border-radius: 10px !important;\n        border: none !important;\n    }\n    .nr-dashboard-theme md-select-menu md-option[selected] {\n        color: white !important;\n        background-color: #1a3566 !important;\n    }\n\n    /*Template*/\n    md-card>img, md-card>md-card-header img, md-card md-card-title-media img {\n        border-radius: 10px !important;\n    }\n\n    /* Color picker text BG */\n    .nr-dashboard-theme .color-picker-input-wrapper > input {\n        color: white !important;\n        background-color: transparent !important;\n    }\n\n    .nr-dashboard-theme .nr-dashboard-date-picker .md-button.md-icon-button md-icon {\n    color: black !important;\n    }\n\n</style>",
        "storeOutMessages": true,
        "fwdInMessages": true,
        "resendOnRefresh": false,
        "templateScope": "global",
        "className": "",
        "x": 240,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "5c993516fab64968",
        "type": "template",
        "z": "fc7fe9daa568b682",
        "name": "",
        "field": "ui_control",
        "fieldType": "msg",
        "format": "json",
        "syntax": "mustache",
        "template": "{\n    \"options\":{\n        \"waveColor\": \"#66FFF7\",\n        \"circleColor\": \"#03658c\"\n    }\n}",
        "output": "json",
        "x": 700,
        "y": 1000,
        "wires": [
            [
                "fec175127c745b74"
            ]
        ]
    },
    {
        "id": "e0e443b7b9b06d1e",
        "type": "ui_date_picker",
        "z": "fc7fe9daa568b682",
        "name": "",
        "label": "début",
        "group": "880b9ee2c0fd9db3",
        "order": 6,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 530,
        "y": 820,
        "wires": [
            [
                "0abf624e3fe23ad1"
            ]
        ]
    },
    {
        "id": "fcc488eb1d3199f4",
        "type": "ui_date_picker",
        "z": "fc7fe9daa568b682",
        "name": "",
        "label": "fin",
        "group": "880b9ee2c0fd9db3",
        "order": 10,
        "width": 6,
        "height": 1,
        "passthru": true,
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 530,
        "y": 860,
        "wires": [
            [
                "bcf5846e19cdc2c1"
            ]
        ]
    },
    {
        "id": "0abf624e3fe23ad1",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "div 1000",
        "func": "msg.payload = msg.payload/1000\nglobal.set('début', msg.payload );\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 820,
        "wires": [
            [
                "08594cfd36e64c22"
            ]
        ]
    },
    {
        "id": "bcf5846e19cdc2c1",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "div 1000",
        "func": "msg.payload = msg.payload/1000\nglobal.set('fin', msg.payload);\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 680,
        "y": 860,
        "wires": [
            [
                "4ee63a1e40291da8"
            ]
        ]
    },
    {
        "id": "08594cfd36e64c22",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 15",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 820,
        "wires": []
    },
    {
        "id": "4ee63a1e40291da8",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 16",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "statusVal": "",
        "statusType": "auto",
        "x": 860,
        "y": 860,
        "wires": []
    },
    {
        "id": "dfc33aa0a1bb15ce",
        "type": "inject",
        "z": "fc7fe9daa568b682",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 350,
        "y": 1420,
        "wires": [
            [
                "64282c0b02758047",
                "b98569727d013732",
                "87a8a437da1de8a6",
                "30db5cc62f3e7c2b",
                "24d4b28bc186cc2c",
                "4c3b1cbc2da0770f"
            ]
        ]
    },
    {
        "id": "30db5cc62f3e7c2b",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 5",
        "func": "var timestamps = global.get('timestamp_btw');\nvar dure = global.get('dure');\n\n// Ensure both arrays are of the same length\nif (timestamps.length !== dure.length) {\n    node.error(\"Timestamps and values arrays are not of the same length\");\n    return;\n}\n\n// Group and sum values by day\nlet aggregatedData = {};\ntimestamps.forEach((ts, index) => {\n    let date = new Date(ts * 1000);\n    let dayKey = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');\n\n    if (!aggregatedData[dayKey]) {\n        aggregatedData[dayKey] = 0;\n    }\n    aggregatedData[dayKey] += Number(dure[index]);\n});\n\n// Separate keys and values for chart data\nlet formattedTimestamps = Object.keys(aggregatedData);\nlet aggregatedValues = Object.values(aggregatedData);\n\n// Format timestamps for display\nlet formattedDisplayTimestamps = formattedTimestamps.map(dayKey => {\n    let parts = dayKey.split('-');\n    return `${parts[1]}/${parts[2]}`; // format as MM/DD\n});\n\n// Preparing the data for the chart\nlet chartData = {\n    \"series\": [\"A\"],\n    \"data\": [aggregatedValues],\n    \"labels\": formattedDisplayTimestamps\n};\n\n// Assign the chart data to the payload of the msg object\nmsg.payload = [chartData];\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1380,
        "wires": [
            [
                "b0c34abfc938aced",
                "6370771d48a10ca7"
            ]
        ]
    },
    {
        "id": "6370771d48a10ca7",
        "type": "debug",
        "z": "fc7fe9daa568b682",
        "name": "debug 17",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1180,
        "y": 1340,
        "wires": []
    },
    {
        "id": "66a852e5fafe5a95",
        "type": "ui_button",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "6b316a731f2e67ed",
        "order": 5,
        "width": 2,
        "height": 1,
        "passthru": true,
        "label": "write charts",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 250,
        "y": 1260,
        "wires": [
            []
        ]
    },
    {
        "id": "91a97dcfde6de741",
        "type": "ui_button",
        "z": "fc7fe9daa568b682",
        "name": "",
        "group": "6b316a731f2e67ed",
        "order": 7,
        "width": 3,
        "height": 1,
        "passthru": false,
        "label": "write",
        "tooltip": "",
        "color": "",
        "bgcolor": "",
        "className": "",
        "icon": "",
        "payload": "",
        "payloadType": "str",
        "topic": "topic",
        "topicType": "msg",
        "x": 230,
        "y": 1340,
        "wires": [
            []
        ]
    },
    {
        "id": "24d4b28bc186cc2c",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 6",
        "func": "var timestamps = global.get('timestamp_btw');\nvar douce = global.get('douce');\n\n\n// Ensure both arrays are of the same length\nif (timestamps.length !== douce.length) {\n    node.error(\"Timestamps and values arrays are not of the same length\");\n    return;\n}\n\n// Group and sum values by day\nlet aggregatedData = {};\ntimestamps.forEach((ts, index) => {\n    let date = new Date(ts * 1000);\n    let dayKey = date.getFullYear() + '-' + String(date.getMonth() + 1).padStart(2, '0') + '-' + String(date.getDate()).padStart(2, '0');\n\n    if (!aggregatedData[dayKey]) {\n        aggregatedData[dayKey] = 0;\n    }\n    aggregatedData[dayKey] += Number(douce[index]);\n});\n\n// Separate keys and values for chart data\nlet formattedTimestamps = Object.keys(aggregatedData);\nlet aggregatedValues = Object.values(aggregatedData);\n\n// Format timestamps for display\nlet formattedDisplayTimestamps = formattedTimestamps.map(dayKey => {\n    let parts = dayKey.split('-');\n    return `${parts[1]}/${parts[2]}`; // format as MM/DD\n});\n\n// Preparing the data for the chart\nlet chartData = {\n    \"series\": [\"A\"],\n    \"data\": [aggregatedValues],\n    \"labels\": formattedDisplayTimestamps\n};\n\n// Assign the chart data to the payload of the msg object\nmsg.payload = [chartData];\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1420,
        "wires": [
            [
                "31ed4b7a5c0756eb"
            ]
        ]
    },
    {
        "id": "4c3b1cbc2da0770f",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 7",
        "func": "var timestamps = global.get('timestamp_btw');\nvar dure = global.get('dure');\n// Example input arrays\n\n// Ensure both arrays are of the same length\nif (timestamps.length !== dure.length) {\n    node.error(\"Timestamps and values arrays are not of the same length\");\n    return;\n}\n\n\nlet formattedTimestamps = timestamps.map(ts => {\n    let date = new Date(ts * 1000); // converting to milliseconds\n    let month = String(date.getMonth() + 1).padStart(2, '0'); // Months are 0-based, so add 1\n    let day = String(date.getDate()).padStart(2, '0');\n    let hours = String(date.getHours()).padStart(2, '0');\n    let minutes = String(date.getMinutes()).padStart(2, '0');\n    return `${month}/${day} ${hours}:${minutes}`;\n});\n\n\n// Preparing the data for the chart\nlet chartData = {\n    \"series\": [\"A\"],\n    \"data\": [dure],\n    \"labels\": formattedTimestamps\n};\n\n// Assign the chart data to the payload of the msg object\nmsg.payload = [chartData];\n\n// Return the modified msg object\nreturn msg;\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 800,
        "y": 1460,
        "wires": [
            [
                "b346f9da725e5f52"
            ]
        ]
    },
    {
        "id": "f464d95542f02db4",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 8",
        "func": "// Retrieve the 'dure' array from global context\nvar dure = global.get('dure');\n\n// Check if 'dure' is an array and has elements\nif (!Array.isArray(dure) || dure.length === 0) {\n    node.error(\"'dure' is not an array or is empty\");\n    return;\n}\n\n// Sum up the values in 'dure'\nlet sum = dure.reduce((accumulator, currentValue) => {\n    return accumulator + Number(currentValue);\n}, 0);\n\n// Store the sum in a new array\nvar sumArray = [sum];\n\n// You can then use 'sumArray' as needed, for example, set it to global context or pass it to the next node\n// For example, setting it to global context:\nglobal.set('sumDure', sumArray);\n\n// Returning the sumArray in msg.payload\nmsg.payload = sumArray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 940,
        "wires": [
            [
                "fec175127c745b74"
            ]
        ]
    },
    {
        "id": "b407fd0ce94a0089",
        "type": "inject",
        "z": "fc7fe9daa568b682",
        "name": "",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "topic",
                "vt": "str"
            }
        ],
        "repeat": "1",
        "crontab": "",
        "once": true,
        "onceDelay": "1",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "x": 130,
        "y": 1020,
        "wires": [
            [
                "f464d95542f02db4",
                "e27d9d68e1a8196e"
            ]
        ]
    },
    {
        "id": "e27d9d68e1a8196e",
        "type": "function",
        "z": "fc7fe9daa568b682",
        "name": "function 9",
        "func": "// Retrieve the 'dure' array from global context\nvar douce = global.get('douce');\n\n// Check if 'dure' is an array and has elements\nif (!Array.isArray(douce) || douce.length === 0) {\n    node.error(\"'dure' is not an array or is empty\");\n    return;\n}\n\n// Sum up the values in 'dure'\nlet sum = douce.reduce((accumulator, currentValue) => {\n    return accumulator + Number(currentValue);\n}, 0);\n\n// Store the sum in a new array\nvar sumArray = [sum];\n\n// You can then use 'sumArray' as needed, for example, set it to global context or pass it to the next node\n// For example, setting it to global context:\nglobal.set('sumDouce', sumArray);\n\n// Returning the sumArray in msg.payload\nmsg.payload = sumArray;\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 700,
        "y": 1100,
        "wires": [
            [
                "914ac717d115c7a4"
            ]
        ]
    },
    {
        "id": "43d93ca70a6f6926",
        "type": "ui_dropdown",
        "z": "fc7fe9daa568b682",
        "name": "",
        "label": "DropDown",
        "tooltip": "",
        "place": "Select option",
        "group": "1e142cdeb82002af",
        "order": 1,
        "width": 0,
        "height": 0,
        "passthru": true,
        "multiple": false,
        "options": [
            {
                "label": "30min",
                "value": "30",
                "type": "str"
            },
            {
                "label": "1hr",
                "value": "60",
                "type": "str"
            },
            {
                "label": "2hrs",
                "value": "120",
                "type": "str"
            },
            {
                "label": "1jr",
                "value": "333",
                "type": "str"
            },
            {
                "label": "1sem",
                "value": "555555",
                "type": "str"
            },
            {
                "label": "1mois",
                "value": "8888888",
                "type": "str"
            }
        ],
        "payload": "",
        "topic": "topic",
        "topicType": "msg",
        "className": "",
        "x": 190,
        "y": 800,
        "wires": [
            []
        ]
    }
]